/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.0).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.lockss.laaws.config.api;

import java.time.OffsetDateTime;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "config", description = "the config API")
public interface ConfigApi {

    ConfigApiDelegate getDelegate();

    @ApiOperation(value = "Get the timestamp when the configuration was last updated", nickname = "getLastUpdateTime", notes = "Get the timestamp when the configuration was last updated", response = OffsetDateTime.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The timestamp when the configuration was last updated", response = OffsetDateTime.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/config/lastupdatetime",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<OffsetDateTime> getLastUpdateTime() {
        return getDelegate().getLastUpdateTime();
    }


    @ApiOperation(value = "Get the URLs from which the configuration was loaded", nickname = "getLoadedUrlList", notes = "Get the URLs from which the configuration was actually\\ \\ loaded, reflecting any failover to local copies", response = String.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The URLs from which the configuration was loaded", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/config/loadedurls",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<String>> getLoadedUrlList() {
        return getDelegate().getLoadedUrlList();
    }


    @ApiOperation(value = "Get the named configuration file", nickname = "getSectionConfig", notes = "Get the configuration file stored for a given name", response = Resource.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The named configuration file", response = Resource.class),
        @ApiResponse(code = 304, message = "Not Modified"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 406, message = "Not Acceptable"),
        @ApiResponse(code = 412, message = "Precondition failed"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/config/file/{sectionName}",
        produces = { "multipart/form-data" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Resource> getSectionConfig(@ApiParam(value = "The name of the section for which the configuration file\\ \\ is requested",required=true) @PathVariable("sectionName") String sectionName,@ApiParam(value = "The Accept header" ,required=true) @RequestHeader(value="Accept", required=true) String accept,@ApiParam(value = "The If-Match header" ) @RequestHeader(value="If-Match", required=false) String ifMatch,@ApiParam(value = "The If-Match header" ) @RequestHeader(value="If-Modified-Since", required=false) String ifModifiedSince,@ApiParam(value = "The If-Match header" ) @RequestHeader(value="If-None-Match", required=false) String ifNoneMatch,@ApiParam(value = "The If-Match header" ) @RequestHeader(value="If-Unmodified-Since", required=false) String ifUnmodifiedSince) {
        return getDelegate().getSectionConfig(sectionName, accept, ifMatch, ifModifiedSince, ifNoneMatch, ifUnmodifiedSince);
    }


    @ApiOperation(value = "Get the configuration file for a URL", nickname = "getUrlConfig", notes = "Get the configuration file stored for a given URL", response = Resource.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The configuration file for the URL", response = Resource.class),
        @ApiResponse(code = 304, message = "Not Modified"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 406, message = "Not Acceptable"),
        @ApiResponse(code = 412, message = "Precondition failed"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/config/url",
        produces = { "multipart/form-data" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Resource> getUrlConfig(@NotNull @ApiParam(value = "The URL for which the configuration is requested", required = true) @Valid @RequestParam(value = "url", required = true) String url,@ApiParam(value = "The Accept header" ,required=true) @RequestHeader(value="Accept", required=true) String accept,@ApiParam(value = "The If-Match header" ) @RequestHeader(value="If-Match", required=false) String ifMatch,@ApiParam(value = "The If-Match header" ) @RequestHeader(value="If-Modified-Since", required=false) String ifModifiedSince,@ApiParam(value = "The If-Match header" ) @RequestHeader(value="If-None-Match", required=false) String ifNoneMatch,@ApiParam(value = "The If-Match header" ) @RequestHeader(value="If-Unmodified-Since", required=false) String ifUnmodifiedSince) {
        return getDelegate().getUrlConfig(url, accept, ifMatch, ifModifiedSince, ifNoneMatch, ifUnmodifiedSince);
    }


    @ApiOperation(value = "Store the named configuration file", nickname = "putConfig", notes = "Store the configuration file for a given name", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 412, message = "Precondition failed"),
        @ApiResponse(code = 415, message = "Unsupported Media Type"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/config/file/{sectionName}",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> putConfig(@ApiParam(value = "The name of the section for which the configuration file\\ \\ is to be stored",required=true) @PathVariable("sectionName") String sectionName,@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile configFile,@ApiParam(value = "The If-Match header" ) @RequestHeader(value="If-Match", required=false) String ifMatch,@ApiParam(value = "The If-Match header" ) @RequestHeader(value="If-Modified-Since", required=false) String ifModifiedSince,@ApiParam(value = "The If-Match header" ) @RequestHeader(value="If-None-Match", required=false) String ifNoneMatch,@ApiParam(value = "The If-Match header" ) @RequestHeader(value="If-Unmodified-Since", required=false) String ifUnmodifiedSince) {
        return getDelegate().putConfig(sectionName, configFile, ifMatch, ifModifiedSince, ifNoneMatch, ifUnmodifiedSince);
    }


    @ApiOperation(value = "Request a configuration reload", nickname = "putConfigReload", notes = "Request that the stored configuration is reloaded", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "config", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/config/reload",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<Void> putConfigReload() {
        return getDelegate().putConfigReload();
    }

}
