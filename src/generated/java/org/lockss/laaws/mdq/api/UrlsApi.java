/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.0).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.lockss.laaws.mdq.api;

import org.lockss.laaws.mdq.model.UrlInfo;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "urls", description = "the urls API")
public interface UrlsApi {

    UrlsApiDelegate getDelegate();

    @ApiOperation(value = "Gets the URL for a DOI", nickname = "getUrlsDoi", notes = "Provides the URL for a DOI given the DOI", response = UrlInfo.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "urls", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The URL for the specified DOI", response = UrlInfo.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/urls/doi",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UrlInfo> getUrlsDoi(@NotNull @ApiParam(value = "The DOI for which the URL is requested", required = true) @Valid @RequestParam(value = "doi", required = true) String doi) {
        return getDelegate().getUrlsDoi(doi);
    }


    @ApiOperation(value = "Performs an OpenURL query", nickname = "getUrlsOpenUrl", notes = "Provides the URL that results from performing an OpenURL query. With query parameters inline", response = UrlInfo.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "urls", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The data related to the performed OpenURL query", response = UrlInfo.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/urls/openurl",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UrlInfo> getUrlsOpenUrl(@NotNull @ApiParam(value = "The OpenURL parameters", required = true) @Valid @RequestParam(value = "params", required = true) List<String> params) {
        return getDelegate().getUrlsOpenUrl(params);
    }

}
