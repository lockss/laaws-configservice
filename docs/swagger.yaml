# Copyright (c) 2000-2018 Board of Trustees of Leland Stanford Jr. University,
# all rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
swagger: '2.0'
info:
  description: API of Configuration Service for LAAWS
  version: 1.0.0
  title: LAAWS Configuration Service API
  termsOfService: http://www.lockss.org/terms/
  contact:
    name: 'LOCKSS Support'
    url: 'http://www.lockss.org/'
    email: 'support@lockss.org'
  license:
    name: 'Modified BSD License'
    url: 'http://www.lockss.org/support/open-source-license/'
host: 'laaws.lockss.org:443'
basePath: /
tags:
  - name: Default
    description: Default section
  - name: config
    description: Tasks on the configuration
  - name: aus
    description: Tasks on the configuration
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
security:
  - basicAuth: []
paths:
  '/config/file/{sectionName}':
    put:
      tags:
        - config
      summary: Store the named configuration file
      description: Store the configuration file for a given name
      operationId: putConfig
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: 'sectionName'
          in: path
          description: The name of the section for which the configuration file\
            \ is to be stored
          required: true
          type: string
        - name: 'configFile'
          in: body
          description: The configuration file to be stored
          required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
        '401':
          description: Unauthorized request
        '403':
          description: Forbidden request
        '500':
          description: Internal server error
        '503':
          description: Some or all of the system is not available
    get:
      tags:
        - config
      summary: Get the named configuration file
      description: Get the configuration file stored for a given name
      operationId: getSectionConfig
      produces:
        - multipart/form-data
      parameters:
        - name: 'sectionName'
          in: path
          description: The name of the section for which the configuration file\
            \ is requested
          required: true
          type: string
      responses:
        '200':
          description: The named configuration file
        '400':
          description: Bad request
        '401':
          description: Unauthorized request
        '500':
          description: Internal server error
        '503':
          description: Some or all of the system is not available
  '/config/url/{url}':
    get:
      tags:
        - config
      summary: Get the configuration file for a URL
      description: Get the configuration file stored for a given URL
      operationId: getUrlConfig
      produces:
        - multipart/form-data
      parameters:
        - name: 'url'
          in: path
          description: The URL for which the configuration is requested
          required: true
          type: string
      responses:
        '200':
          description: The configuration file for the URL
        '400':
          description: Bad request
        '401':
          description: Unauthorized request
        '500':
          description: Internal server error
        '503':
          description: Some or all of the system is not available
  '/config/loadedurls':
    get:
      tags:
        - config
      summary: Get the URLs from which the configuration was loaded
      description: Get the URLs from which the configuration was actually\
        \ loaded, reflecting any failover to local copies
      operationId: getLoadedUrlList
      produces:
        - application/json
      responses:
        '200':
          description: The URLs from which the configuration was loaded
          schema:
            type: array
            items:
              type: string
        '401':
          description: Unauthorized request
        '500':
          description: Internal server error
        '503':
          description: Some or all of the system is not available
  '/config/lastupdatetime':
    get:
      tags:
        - config
      summary: Get the timestamp when the configuration was last updated
      description: Get the timestamp when the configuration was last updated
      operationId: getLastUpdateTime
      produces:
        - application/json
      responses:
        '200':
          description: The timestamp when the configuration was last updated
          schema:
            type: string
            format: date-time
        '401':
          description: Unauthorized request
        '500':
          description: Internal server error
        '503':
          description: Some or all of the system is not available
  '/config/reload':
    put:
      tags:
        - config
      summary: Request a configuration reload
      description: Request that the stored configuration is reloaded
      operationId: putConfigReload
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized request
        '403':
          description: Forbidden request
        '500':
          description: Internal server error
        '503':
          description: Some or all of the system is not available
  '/aus':
    get:
      tags:
        - aus
      summary: Get the configurations of all AUs
      description: Get the configuration of all AUs
      operationId: getAllAuConfig
      produces:
        - application/json
      responses:
        '200':
          description: The configuration of all AUs
          schema:
            $ref: '#/definitions/configExchange'
        '401':
          description: Unauthorized request
        '500':
          description: Internal server error
        '503':
          description: Some or all of the system is not available
  '/aus/{auid}':
    put:
      tags:
        - aus
      summary: Store the configuration of an AU
      description: Store the configuration of an AU given the AU identifier
      operationId: putAuConfig
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: 'auid'
          in: path
          description: The identifier of the AU for which the configuration is\
            \ to be stored
          required: true
          type: string
        - name: 'configExchange'
          in: body
          description: The configuration items to be stored
          required: true
          schema:
            $ref: '#/definitions/configExchange'
      responses:
        '200':
          description: The configuration of the specified AU after it's stored
          schema:
            $ref: '#/definitions/configExchange'
        '400':
          description: Bad request
        '401':
          description: Unauthorized request
        '403':
          description: Forbidden request
        '500':
          description: Internal server error
        '503':
          description: Some or all of the system is not available
    get:
      tags:
        - aus
      summary: Get the configuration of an AU
      description: Get the configuration of an AU given the AU identifier
      operationId: getAuConfig
      produces:
        - application/json
      parameters:
        - name: 'auid'
          in: path
          description: The identifier of the AU for which the configuration is\
            \ requested
          required: true
          type: string
      responses:
        '200':
          description: The configuration of the specified AU
          schema:
            $ref: '#/definitions/configExchange'
        '400':
          description: Bad request
        '401':
          description: Unauthorized request
        '500':
          description: Internal server error
        '503':
          description: Some or all of the system is not available
    delete:
      tags:
        - aus
      summary: Delete the the configuration of an AU
      description: Delete the configuration of an AU given the AU identifier
      operationId: deleteAuConfig
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: 'auid'
          in: path
          description: The identifier of the AU for which the configuration is\
            \ to be deleted
          required: true
          type: string
      responses:
        '200':
          description: The deleted configuration of the specified AU
          schema:
            $ref: '#/definitions/configExchange'
        '400':
          description: Bad request
        '401':
          description: Unauthorized request
        '403':
          description: Forbidden request
        '500':
          description: Internal server error
        '503':
          description: Some or all of the system is not available
  /status:
    get:
      tags:
      - "status"
      summary: "Get the status of the service"
      description: "Get the status of the service"
      operationId: "getStatus"
      produces:
      - "application/json"
      responses:
        200:
          description: "The status of the service"
          schema:
            $ref: "#/definitions/apiStatus"
        401:
          description: "Unauthorized request"
        500:
          description: "Internal server error"
        503:
          description: "Some or all of the system is not available"
securityDefinitions:
  basicAuth:
    description: "HTTP Basic Authentication. Works over `HTTP` and `HTTPS`"
    type: "basic"
definitions:
  configModSpec:
    type: object
    required:
      - header
      - updates
      - deletes
    properties:
      header:
        type: string
        description: A file header string
      updates:
        type: object
        description: The map of configuration items that are modified
        additionalProperties:
          type: string
          description: The value of the configuration for the key
      deletes:
        type: array
        items:
          type: string
        description: The set of configuration keys to be deleted
    description: The encapsulation of a set of configuration modifications
  configExchange:
    type: object
    required:
      - props
    properties:
      props:
        type: object
        description: The map of configuration items
        additionalProperties:
          type: string
          description: The value of the configuration for the key
    description: The encapsulation of a set of configuration properties
  apiStatus:
    type: "object"
    required:
    - "version"
    - "ready"
    properties:
      version:
        type: "string"
        description: "The version of the service"
      ready:
        type: "boolean"
        description: "The indication of whether the service is available"
    description: "The status information of the service"
